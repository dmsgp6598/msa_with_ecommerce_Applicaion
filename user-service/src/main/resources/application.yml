server:
  port: 0

spring:
  application:
    name: user-service
  zipkin:
    base-url : http://127.0.0.1:9411
    enabled: true
  sleuth :
    sampler :
      probability: 1.0 #횟수, 빈도수를 가지고 zipkin 서버에 전달할것인가에 대한 설정 1.0일때는 100% 다 전달
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  h2:
    console:
      enabled: true
      settings:
        web-allow-others: true
      path: /h2-console
#  datasource:
#    driver-class-name: org.h2.Driver
#    url: jdbc:h2:mem:testdb

eureka:
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

greeting:
  message: Welcome to the Simple E-commerce.

logging:
  level:
    com.example.userservice.client: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, busrefresh, info, metrics, prometheus
        #refresh : POST로 전달. 현재 마이크로 서비스에 있는 config에서 가지고 와야 될 정보를 refresh 해줌


#token:
#  expiration_time: 86400000
#  secret: user_token